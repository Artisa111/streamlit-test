import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime, timedelta
import seaborn as sns
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from scipy import stats
from wordcloud import WordCloud
import sqlite3
import io
import base64
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import folium
from streamlit_folium import st_folium
import requests

st.set_page_config(
    page_title="DataBot Analytics Pro", 
    page_icon="üöÄ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: bold;
    }
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 20px;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .sql-editor {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 10px;
        font-family: 'Courier New', monospace;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.markdown('<h1 class="main-header">üöÄ DataBot Analytics Pro</h1>', unsafe_allow_html=True)
    
    with st.sidebar:
        st.markdown("### üéØ Navigation")
        page = st.selectbox(
            "Choose Section",
            ["üè† Dashboard", "üìÅ Upload Data", "üìà Charts", "üìä Statistics", 
             "ü§ñ Machine Learning", "üß™ A/B Testing", "üíæ Database", "üìÑ Reports", "üé® Dashboard Builder"]
        )
    
    if page == "üè† Dashboard":
        show_dashboard()
    elif page == "üìÅ Upload Data":
        show_upload()
    elif page == "üìà Charts":
        show_charts()
    elif page == "üìä Statistics":
        show_stats()
    elif page == "ü§ñ Machine Learning":
        show_ml()
    elif page == "üß™ A/B Testing":
        show_ab_testing()
    elif page == "üíæ Database":
        show_database()
    elif page == "üìÑ Reports":
        show_reports()
    elif page == "üé® Dashboard Builder":
        show_dashboard_builder()

def show_dashboard():
    st.markdown("## üè† Welcome to DataBot Analytics Pro!")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        if st.button("üé≤ Load Demo Data"):
            demo_data = create_demo_data()
            st.session_state.data = demo_data
            st.success("Demo data loaded! üéâ")
        
        if st.button("üõí Load E-commerce Data"):
            ecommerce_data = create_ecommerce_data()
            st.session_state.data = ecommerce_data
            st.success("E-commerce data loaded! üí∞")
    
    with col2:
        st.markdown("### üéØ Quick Actions")
        if st.button("üîç Auto Analysis"):
            if 'data' in st.session_state:
                auto_analyze_data()
            else:
                st.warning("Load data first!")
    
    if 'data' in st.session_state:
        df = st.session_state.data
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìù Total Rows", f"{len(df):,}")
        with col2:
            st.metric("üìä Columns", f"{len(df.columns)}")
        with col3:
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            st.metric("üî¢ Numeric Cols", f"{len(numeric_cols)}")
        with col4:
            missing_pct = (df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100
            st.metric("‚ùå Missing %", f"{missing_pct:.1f}%")
        
        # –ë—ã—Å—Ç—Ä–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        if len(numeric_cols) > 0:
            col1, col2 = st.columns(2)
            
            with col1:
                fig = px.line(df, y=numeric_cols[0], title="Data Trend")
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                if len(numeric_cols) > 1:
                    corr_matrix = df[numeric_cols].corr()
                    fig = px.imshow(corr_matrix, title="Correlation Matrix")
                    st.plotly_chart(fig, use_container_width=True)

def show_upload():
    st.markdown("## üìÅ Upload Your Data")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        uploaded_file = st.file_uploader("Choose CSV file", type=['csv'])
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
            st.session_state.data = df
            st.success(f"‚úÖ Loaded {len(df)} rows!")
            st.dataframe(df.head())
    
    with col2:
        st.markdown("### üìä Data Quality")
        if 'data' in st.session_state:
            df = st.session_state.data
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            quality_score = calculate_data_quality(df)
            st.metric("Quality Score", f"{quality_score:.1f}/10")
            
            st.markdown("### üîß Data Cleaning")
            if st.button("Remove Duplicates"):
                df_clean = df.drop_duplicates()
                st.session_state.data = df_clean
                st.success(f"Removed {len(df) - len(df_clean)} duplicates")
            
            if st.button("Fill Missing Values"):
                df_filled = fill_missing_values(df)
                st.session_state.data = df_filled
                st.success("Missing values filled!")

def show_charts():
    st.markdown("## üìà Advanced Data Visualization")
    if 'data' not in st.session_state:
        st.warning("Please upload data first!")
        return
    
    df = st.session_state.data
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    text_cols = df.select_dtypes(include=['object']).columns.tolist()
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    chart_type = st.selectbox(
        "üìä Choose Chart Type", 
        ["üìà Line Chart", "üìä Bar Chart", "üîµ Scatter Plot", "üìâ Area Chart", 
         "üó∫Ô∏è Heatmap", "üåç World Map", "‚òÅÔ∏è Word Cloud", "üìä 3D Scatter", "üó∫Ô∏è Leaflet Map"]
    )
    
    if chart_type == "‚òÅÔ∏è Word Cloud" and len(text_cols) > 0:
        st.markdown("### ‚òÅÔ∏è Text Analysis")
        text_col = st.selectbox("Choose Text Column", text_cols)
        
        if st.button("Generate Word Cloud"):
            text_data = ' '.join(df[text_col].astype(str))
            wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text_data)
            
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.imshow(wordcloud, interpolation='bilinear')
            ax.axis('off')
            st.pyplot(fig)
    
    elif chart_type == "üìä 3D Scatter" and len(numeric_cols) >= 3:
        st.markdown("### üìä 3D Scatter Plot")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            x_col = st.selectbox("X-axis", numeric_cols)
        with col2:
            y_col = st.selectbox("Y-axis", [col for col in numeric_cols if col != x_col])
        with col3:
            z_col = st.selectbox("Z-axis", [col for col in numeric_cols if col not in [x_col, y_col]])
        
        fig = px.scatter_3d(df, x=x_col, y=y_col, z=z_col, title="3D Scatter Plot")
        st.plotly_chart(fig, use_container_width=True)
    
    elif chart_type == "üåç World Map":
        show_world_map()
    
    elif chart_type == "üó∫Ô∏è Leaflet Map":
        show_leaflet_map()
    
    elif len(numeric_cols) >= 1:
        if chart_type == "üìà Line Chart":
            col_choice = st.selectbox("Choose Column", numeric_cols)
            fig = px.line(df, y=col_choice, title=f"Line Chart: {col_choice}")
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "üìä Bar Chart":
            col_choice = st.selectbox("Choose Column", numeric_cols)
            fig = px.bar(df, y=col_choice, title=f"Bar Chart: {col_choice}")
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "üîµ Scatter Plot" and len(numeric_cols) >= 2:
            col1, col2 = st.columns(2)
            with col1:
                x_col = st.selectbox("X-axis", numeric_cols)
            with col2:
                y_col = st.selectbox("Y-axis", [col for col in numeric_cols if col != x_col])
            fig = px.scatter(df, x=x_col, y=y_col, title=f"Scatter: {x_col} vs {y_col}")
            st.plotly_chart(fig, use_container_width=True)

def show_leaflet_map():
    st.markdown("### üó∫Ô∏è Interactive Leaflet Map")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏
        search_query = st.text_input(
            "üîç Search any location", 
            placeholder="Try: 'Tel Aviv', 'Kyiv', 'Paris', 'Times Square NYC'...",
            help="Enter any city, address, landmark, or coordinates"
        )
        
        if search_query and st.button("üåç Search & Navigate"):
            with st.spinner("Searching location..."):
                coords = geocode_location(search_query)
                if coords:
                    st.session_state.map_center = coords
                    st.session_state.search_result = search_query
                    st.success(f"‚úÖ Found: {search_query}")
                    st.rerun()
                else:
                    st.error("‚ùå Location not found. Try a different search term.")
    
    with col2:
        st.markdown("### ‚öôÔ∏è Map Settings")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        map_style = st.selectbox("Map Style", [
            "OpenStreetMap",
            "CartoDB positron", 
            "CartoDB dark_matter",
            "Stamen Terrain",
            "Stamen Toner"
        ])
        
        show_markers = st.checkbox("Show Data Points", True)
        show_heatmap = st.checkbox("Show Heatmap", False)
    
    # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Jerusalem)
    if 'map_center' not in st.session_state:
        st.session_state.map_center = [31.7683, 35.2137]  # Jerusalem
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    m = create_interactive_map(
        center=st.session_state.map_center,
        style=map_style,
        show_markers=show_markers,
        show_heatmap=show_heatmap
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    st.markdown("### üåç Interactive Map")
    map_data = st_folium(m, width=1000, height=600, returned_objects=["last_clicked", "last_object_clicked"])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–∫–µ
    if map_data['last_clicked']:
        lat = map_data['last_clicked']['lat']
        lng = map_data['last_clicked']['lng']
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìç Latitude", f"{lat:.6f}")
        with col2:
            st.metric("üìç Longitude", f"{lng:.6f}")
        with col3:
            # –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            address = reverse_geocode(lat, lng)
            st.info(f"üìç {address}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
    if 'search_result' in st.session_state:
        st.success(f"üéØ Current location: {st.session_state.search_result}")

def create_interactive_map(center, style="OpenStreetMap", show_markers=True, show_heatmap=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π Leaflet –∫–∞—Ä—Ç—ã"""
    
    # –ö–∞—Ä—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    m = folium.Map(
        location=center,
        zoom_start=12,
        tiles=style
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    folium.Marker(
        center,
        popup=f"üìç Current Location<br>Lat: {center[0]:.4f}<br>Lng: {center[1]:.4f}",
        tooltip="üìç Current Location",
        icon=folium.Icon(color='red', icon='star', prefix='fa')
    ).add_to(m)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'data' in st.session_state and show_markers:
        df = st.session_state.data
        add_data_points_to_map(m, df)
    
    # Heatmap –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if 'data' in st.session_state and show_heatmap:
        add_heatmap_to_map(m, st.session_state.data)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç
    add_popular_locations(m)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
    add_map_controls(m)
    
    return m

def geocode_location(query):
    """–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google-–ø–æ–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫"""
    
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # 1. Nominatim (OpenStreetMap)
        url = "https://nominatim.openstreetmap.org/search"
        params = {
            'q': query,
            'format': 'json',
            'limit': 1
        }
        
        response = requests.get(url, params=params, timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data:
                lat = float(data[0]['lat'])
                lon = float(data[0]['lon'])
                return [lat, lon]
        
        # 2. Fallback - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        if ',' in query:
            try:
                parts = query.split(',')
                if len(parts) == 2:
                    lat = float(parts[0].strip())
                    lon = float(parts[1].strip())
                    if -90 <= lat <= 90 and -180 <= lon <= 180:
                        return [lat, lon]
            except:
                pass
        
        # 3. –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        known_locations = {
            'jerusalem': [31.7683, 35.2137],
            'tel aviv': [32.0853, 34.7818],
            'haifa': [32.7940, 34.9896],
            'new york': [40.7128, -74.0060],
            'london': [51.5074, -0.1278],
            'paris': [48.8566, 2.3522],
            'tokyo': [35.6762, 139.6503],
            'moscow': [55.7558, 37.6173],
            'dubai': [25.2048, 55.2708],
            'kyiv': [50.4501, 30.5234],
            'berlin': [52.5200, 13.4050],
            'kiryat gat': [31.6095, 34.7733],
            'lviv': [49.8397, 24.0297],
        }
        
        query_lower = query.lower()
        for location, coords in known_locations.items():
            if location in query_lower:
                return coords
        
        return None
        
    except Exception as e:
        print(f"Geocoding error: {e}")
        return None

def reverse_geocode(lat, lng):
    """–û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    
    try:
        url = "https://nominatim.openstreetmap.org/reverse"
        params = {
            'lat': lat,
            'lon': lng,
            'format': 'json'
        }
        
        response = requests.get(url, params=params, timeout=5)
        if response.status_code == 200:
            data = response.json()
            return data.get('display_name', f"Lat: {lat:.4f}, Lng: {lng:.4f}")
        
    except:
        pass
    
    return f"Lat: {lat:.4f}, Lng: {lng:.4f}"

def add_data_points_to_map(map_obj, df):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É"""
    
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    lat_cols = [col for col in df.columns if 'lat' in col.lower() or 'latitude' in col.lower()]
    lng_cols = [col for col in df.columns if 'lng' in col.lower() or 'lon' in col.lower() or 'longitude' in col.lower()]
    
    if lat_cols and lng_cols:
        lat_col = lat_cols[0]
        lng_col = lng_cols[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
        for idx, row in df.iterrows():
            if pd.notna(row[lat_col]) and pd.notna(row[lng_col]):
                try:
                    lat = float(row[lat_col])
                    lng = float(row[lng_col])
                    
                    # –°–æ–∑–¥–∞–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    popup_info = f"<b>Data Point {idx}</b><br>"
                    for col in df.columns[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫
                        popup_info += f"{col}: {row[col]}<br>"
                    
                    folium.CircleMarker(
                        location=[lat, lng],
                        radius=5,
                        popup=popup_info,
                        color='blue',
                        fill=True,
                        fillColor='lightblue'
                    ).add_to(map_obj)
                    
                except:
                    continue

def add_heatmap_to_map(map_obj, df):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    
    try:
        from folium.plugins import HeatMap
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        lat_cols = [col for col in df.columns if 'lat' in col.lower()]
        lng_cols = [col for col in df.columns if 'lng' in col.lower() or 'lon' in col.lower()]
        
        if lat_cols and lng_cols:
            lat_col = lat_cols[0]
            lng_col = lng_cols[0]
            
            heat_data = []
            for idx, row in df.iterrows():
                if pd.notna(row[lat_col]) and pd.notna(row[lng_col]):
                    try:
                        lat = float(row[lat_col])
                        lng = float(row[lng_col])
                        heat_data.append([lat, lng])
                    except:
                        continue
            
            if heat_data:
                HeatMap(heat_data).add_to(map_obj)
                
    except ImportError:
        pass  # HeatMap –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω

def add_popular_locations(map_obj):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç"""
    
    popular_places = [
        {"name": "üèõÔ∏è Old City Jerusalem", "coords": [31.7767, 35.2345], "color": "orange"},
        {"name": "üèñÔ∏è Tel Aviv Beach", "coords": [32.0805, 34.7693], "color": "blue"},
        {"name": "üåä Haifa Port", "coords": [32.8191, 34.9983], "color": "green"},
        {"name": "üèúÔ∏è Dead Sea", "coords": [31.5590, 35.4732], "color": "purple"},
    ]
    
    for place in popular_places:
        folium.CircleMarker(
            location=place["coords"],
            radius=8,
            popup=place["name"],
            tooltip=place["name"],
            color=place["color"],
            fill=True,
            fillColor=place["color"],
            fillOpacity=0.7
        ).add_to(map_obj)

def add_map_controls(map_obj):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É"""
    
    try:
        from folium.plugins import MeasureControl, Draw, Fullscreen
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        map_obj.add_child(MeasureControl())
        
        # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        map_obj.add_child(Fullscreen())
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        draw = Draw(
            draw_options={'polyline': True, 'polygon': True, 'circle': True, 'rectangle': True, 'marker': True},
            edit_options={'edit': True}
        )
        map_obj.add_child(draw)
        
    except ImportError:
        pass  # –ü–ª–∞–≥–∏–Ω—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã

def show_ml():
    st.markdown("## ü§ñ Machine Learning Analytics")
    
    if 'data' not in st.session_state:
        st.warning("Please upload data first!")
        return
    
    df = st.session_state.data
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    
    if len(numeric_cols) < 2:
        st.warning("Need at least 2 numeric columns for ML!")
        return
    
    ml_type = st.selectbox(
        "ü§ñ Choose ML Analysis",
        ["üéØ Clustering", "üìâ PCA Analysis", "üîç Outlier Detection", "üìä Feature Importance"]
    )
    
    if ml_type == "üéØ Clustering":
        st.markdown("### K-Means Clustering")
        
        n_clusters = st.slider("Number of Clusters", 2, 10, 3)
        selected_features = st.multiselect("Select Features", numeric_cols, default=numeric_cols[:3])
        
        if len(selected_features) >= 2 and st.button("Run Clustering"):
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X = df[selected_features].dropna()
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            
            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
            kmeans = KMeans(n_clusters=n_clusters, random_state=42)
            clusters = kmeans.fit_predict(X_scaled)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –≤ –¥–∞–Ω–Ω—ã–µ
            df_clustered = X.copy()
            df_clustered['Cluster'] = clusters
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            if len(selected_features) >= 2:
                fig = px.scatter(
                    df_clustered, 
                    x=selected_features[0], 
                    y=selected_features[1],
                    color='Cluster',
                    title="K-Means Clustering Results"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
            st.markdown("### üìä Cluster Statistics")
            cluster_stats = df_clustered.groupby('Cluster')[selected_features].mean()
            st.dataframe(cluster_stats)
    
    elif ml_type == "üìâ PCA Analysis":
        st.markdown("### Principal Component Analysis")
        
        selected_features = st.multiselect("Select Features", numeric_cols, default=numeric_cols)
        
        if len(selected_features) >= 2 and st.button("Run PCA"):
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X = df[selected_features].dropna()
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            
            # PCA
            pca = PCA()
            X_pca = pca.fit_transform(X_scaled)
            
            # Explained variance
            explained_variance = pca.explained_variance_ratio_
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Scree plot
                fig = px.bar(
                    x=range(1, len(explained_variance) + 1),
                    y=explained_variance,
                    title="PCA Explained Variance",
                    labels={'x': 'Principal Component', 'y': 'Explained Variance Ratio'}
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Cumulative explained variance
                cumulative_variance = np.cumsum(explained_variance)
                fig = px.line(
                    x=range(1, len(cumulative_variance) + 1),
                    y=cumulative_variance,
                    title="Cumulative Explained Variance"
                )
                st.plotly_chart(fig, use_container_width=True)

def show_ab_testing():
    st.markdown("## üß™ A/B Testing & Statistical Analysis")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üìä A/B Test Setup")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if st.button("üé≤ Generate A/B Test Data"):
            ab_data = generate_ab_test_data()
            st.session_state.ab_data = ab_data
            st.success("A/B test data generated!")
        
        if 'ab_data' in st.session_state:
            st.dataframe(st.session_state.ab_data.head())
    
    with col2:
        st.markdown("### üßÆ Test Results")
        
        if 'ab_data' in st.session_state:
            ab_data = st.session_state.ab_data
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞
            metric = st.selectbox("Choose Metric", ["conversion_rate", "revenue", "clicks"])
            
            if st.button("üìä Analyze A/B Test"):
                results = analyze_ab_test(ab_data, metric)
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.markdown(f"### üìà Test Results for {metric}")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Control Mean", f"{results['control_mean']:.3f}")
                with col2:
                    st.metric("Treatment Mean", f"{results['treatment_mean']:.3f}")
                with col3:
                    st.metric("P-value", f"{results['p_value']:.4f}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
                if results['p_value'] < 0.05:
                    st.success("üéâ –°—Ç–∞—Çistically Significant!")
                else:
                    st.warning("‚ùå Not Statistically Significant")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                fig = px.box(ab_data, x='group', y=metric, title=f"Distribution of {metric}")
                st.plotly_chart(fig, use_container_width=True)

def show_database():
    st.markdown("## üíæ Database Connection & SQL")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üîó Database Setup")
        
        db_type = st.selectbox("Database Type", ["SQLite", "PostgreSQL", "MySQL"])
        
        if db_type == "SQLite":
            if st.button("üìÅ Create Sample Database"):
                create_sample_database()
                st.success("Sample SQLite database created!")
        
        st.markdown("### ‚úèÔ∏è SQL Editor")
        sql_query = st.text_area(
            "Enter SQL Query",
            value="SELECT * FROM sales LIMIT 10;",
            height=150,
            help="Write your SQL query here"
        )
        
        if st.button("‚ñ∂Ô∏è Execute Query"):
            try:
                result = execute_sql_query(sql_query)
                st.success("Query executed successfully!")
                st.dataframe(result)
            except Exception as e:
                st.error(f"Query error: {str(e)}")
    
    with col2:
        st.markdown("### üìä Query Results")
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        st.markdown("### üîç Quick Queries")
        
        if st.button("üìà Total Sales"):
            query = "SELECT SUM(amount) as total_sales FROM sales;"
            result = execute_sql_query(query)
            st.metric("Total Sales", f"${result.iloc[0, 0]:,.2f}")
        
        if st.button("üë• Customers by Region"):
            query = "SELECT region, COUNT(*) as customers FROM sales GROUP BY region;"
            result = execute_sql_query(query)
            fig = px.bar(result, x='region', y='customers', title="Customers by Region")
            st.plotly_chart(fig, use_container_width=True)

def show_reports():
    st.markdown("## üìÑ Automated Reports")
    
    if 'data' not in st.session_state:
        st.warning("Please upload data first!")
        return
    
    df = st.session_state.data
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìä Report Configuration")
        
        report_type = st.selectbox(
            "Report Type",
            ["üìà Executive Summary", "üìä Detailed Analysis", "üéØ Custom Report"]
        )
        
        include_charts = st.checkbox("Include Charts", value=True)
        include_stats = st.checkbox("Include Statistics", value=True)
        
        if st.button("üìÑ Generate Report"):
            if report_type == "üìà Executive Summary":
                report_content = generate_executive_summary(df)
            elif report_type == "üìä Detailed Analysis":
                report_content = generate_detailed_analysis(df)
            else:
                report_content = generate_custom_report(df)
            
            st.markdown("### üìã Report Preview")
            st.markdown(report_content)
    
    with col2:
        st.markdown("### üíæ Export Options")
        
        if st.button("üì• Download CSV"):
            csv = df.to_csv(index=False)
            st.download_button(
                label="Download data as CSV",
                data=csv,
                file_name='data_export.csv',
                mime='text/csv'
            )
        
        if st.button("üìä Download Excel"):
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Data', index=False)
            excel_data = output.getvalue()
            
            st.download_button(
                label="Download as Excel",
                data=excel_data,
                file_name='data_export.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )

def show_dashboard_builder():
    st.markdown("## üé® Dashboard Builder")
    
    if 'data' not in st.session_state:
        st.warning("Please upload data first!")
        return
    
    df = st.session_state.data
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    text_cols = df.select_dtypes(include=['object']).columns.tolist()
    
    # Sidebar –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with st.sidebar:
        st.markdown("### üõ†Ô∏è Dashboard Configuration")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_title = st.text_input("Dashboard Title", "My Analytics Dashboard")
        dashboard_theme = st.selectbox("Theme", ["Light", "Dark", "Corporate", "Modern"])
        layout_cols = st.selectbox("Layout", ["1 Column", "2 Columns", "3 Columns", "Grid"])
        
        st.markdown("### üìä Available Widgets")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ session_state
        if 'dashboard_widgets' not in st.session_state:
            st.session_state.dashboard_widgets = []
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        widget_type = st.selectbox("Choose Widget", [
            "üìà Line Chart",
            "üìä Bar Chart", 
            "üî¢ Metric Card",
            "üìã Data Table",
            "ü•ß Pie Chart",
            "üìä 3D Scatter Plot",
            "üö® Outlier Detection",
            "üó∫Ô∏è Leaflet Map"
        ])
        
        if st.button("‚ûï Add Widget"):
            widget_config = create_widget_config(widget_type, df, numeric_cols, text_cols)
            if widget_config:
                st.session_state.dashboard_widgets.append(widget_config)
                st.success(f"Added {widget_type}!")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞–º–∏
        if st.session_state.dashboard_widgets:
            st.markdown("### üóÇÔ∏è Manage Widgets")
            
            for i, widget in enumerate(st.session_state.dashboard_widgets):
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.write(f"{i+1}. {widget['type']}")
                with col2:
                    if st.button("üóëÔ∏è", key=f"delete_{i}"):
                        st.session_state.dashboard_widgets.pop(i)
                        st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞
    st.markdown(f"# {dashboard_title}")
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    apply_dashboard_theme(dashboard_theme)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
    if st.session_state.dashboard_widgets:
        render_dashboard_widgets(st.session_state.dashboard_widgets, df, layout_cols)
    else:
        st.info("üëà Add widgets from the sidebar to build your dashboard!")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
        if st.button("üéØ Load Example Dashboard"):
            st.session_state.dashboard_widgets = create_example_dashboard(df, numeric_cols)
            st.rerun()

def create_widget_config(widget_type, df, numeric_cols, text_cols):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞"""
    
    if widget_type == "üìà Line Chart":
        if len(numeric_cols) == 0:
            st.error("No numeric columns available!")
            return None
        return {
            'type': widget_type,
            'title': 'Line Chart',
            'y_column': numeric_cols[0],
            'color': '#1f77b4',
            'show_points': True
        }
    
    elif widget_type == "üìä Bar Chart":
        if len(numeric_cols) == 0:
            st.error("No numeric columns available!")
            return None
        return {
            'type': widget_type,
            'title': 'Bar Chart',
            'y_column': numeric_cols[0],
            'color': '#ff7f0e'
        }
    
    elif widget_type == "üî¢ Metric Card":
        if len(numeric_cols) == 0:
            st.error("No numeric columns available!")
            return None
        return {
            'type': widget_type,
            'title': 'Total',
            'column': numeric_cols[0],
            'aggregation': 'Sum',
            'format': 'Number'
        }
    
    elif widget_type == "ü•ß Pie Chart":
        if len(text_cols) == 0:
            st.error("No categorical columns available!")
            return None
        return {
            'type': widget_type,
            'title': 'Distribution',
            'category_column': text_cols[0]
        }
    
    elif widget_type == "üìã Data Table":
        return {
            'type': widget_type,
            'title': 'Data Table',
            'columns': df.columns.tolist()[:5],
            'max_rows': 10
        }
    
    elif widget_type == "üìä 3D Scatter Plot":
        if len(numeric_cols) < 3:
            st.error("Need at least 3 numeric columns for 3D scatter!")
            return None
        return {
            'type': widget_type,
            'title': '3D Scatter Plot',
            'x_column': numeric_cols[0],
            'y_column': numeric_cols[1],
            'z_column': numeric_cols[2],
            'color_by': 'None',
            'point_size': 8
        }
    
    elif widget_type == "üö® Outlier Detection":
        if len(numeric_cols) == 0:
            st.error("No numeric columns available!")
            return None
        return {
            'type': widget_type,
            'title': 'Outlier Analysis',
            'column': numeric_cols[0],
            'method': 'IQR (Interquartile Range)',
            'sensitivity': 1.5,
            'show_stats': True
        }
    
    elif widget_type == "üó∫Ô∏è Leaflet Map":
        return {
            'type': widget_type,
            'title': 'Interactive Map',
            'center_lat': 31.7683,  # Jerusalem
            'center_lon': 35.2137,
            'zoom': 10,
            'search_enabled': True
        }
    
    return None

def render_dashboard_widgets(widgets, df, layout):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ"""
    
    if layout == "1 Column":
        for widget in widgets:
            render_single_widget(widget, df)
    
    elif layout == "2 Columns":
        cols = st.columns(2)
        for i, widget in enumerate(widgets):
            with cols[i % 2]:
                render_single_widget(widget, df)
    
    elif layout == "3 Columns":
        cols = st.columns(3)
        for i, widget in enumerate(widgets):
            with cols[i % 3]:
                render_single_widget(widget, df)
    
    elif layout == "Grid":
        # Grid layout - 2x2, 2x3, etc.
        rows_needed = (len(widgets) + 1) // 2
        for row in range(rows_needed):
            cols = st.columns(2)
            for col_idx in range(2):
                widget_idx = row * 2 + col_idx
                if widget_idx < len(widgets):
                    with cols[col_idx]:
                        render_single_widget(widgets[widget_idx], df)

def render_single_widget(widget, df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
    
    try:
        if widget['type'] == "üìà Line Chart":
            st.markdown(f"### {widget['title']}")
            fig = px.line(df, y=widget['y_column'], title=widget['title'])
            fig.update_traces(line_color=widget['color'])
            if widget['show_points']:
                fig.update_traces(mode='lines+markers')
            st.plotly_chart(fig, use_container_width=True)
        
        elif widget['type'] == "üìä Bar Chart":
            st.markdown(f"### {widget['title']}")
            fig = px.bar(df, y=widget['y_column'], title=widget['title'])
            fig.update_traces(marker_color=widget['color'])
            st.plotly_chart(fig, use_container_width=True)
        
        elif widget['type'] == "üî¢ Metric Card":
            col = widget['column']
            agg = widget['aggregation']
            
            if agg == "Sum":
                value = df[col].sum()
            elif agg == "Mean":
                value = df[col].mean()
            elif agg == "Count":
                value = df[col].count()
            elif agg == "Max":
                value = df[col].max()
            elif agg == "Min":
                value = df[col].min()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if widget['format'] == "Currency":
                formatted_value = f"${value:,.2f}"
            elif widget['format'] == "Percentage":
                formatted_value = f"{value:.2f}%"
            else:
                formatted_value = f"{value:,.2f}"
            
            st.metric(widget['title'], formatted_value)
        
        elif widget['type'] == "ü•ß Pie Chart":
            st.markdown(f"### {widget['title']}")
            value_counts = df[widget['category_column']].value_counts()
            fig = px.pie(values=value_counts.values, names=value_counts.index, title=widget['title'])
            st.plotly_chart(fig, use_container_width=True)
        
        elif widget['type'] == "üìã Data Table":
            st.markdown(f"### {widget['title']}")
            show_df = df[widget['columns']].head(widget['max_rows'])
            st.dataframe(show_df, use_container_width=True)
        
        elif widget['type'] == "üìä 3D Scatter Plot":
            st.markdown(f"### {widget['title']}")
            plot_df = df[[widget['x_column'], widget['y_column'], widget['z_column']]].dropna()
            fig = px.scatter_3d(
                plot_df, 
                x=widget['x_column'], 
                y=widget['y_column'], 
                z=widget['z_column'],
                title=widget['title']
            )
            fig.update_traces(marker=dict(size=widget['point_size']))
            st.plotly_chart(fig, use_container_width=True)
        
        elif widget['type'] == "üö® Outlier Detection":
            st.markdown(f"### {widget['title']}")
            column_data = df[widget['column']].dropna()
            outliers_idx, outlier_info = detect_outliers(column_data, widget['method'], widget['sensitivity'])
            
            # Box plot —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
            fig_box = px.box(y=column_data, title=f"Outliers - {widget['column']}")
            
            if len(outliers_idx) > 0:
                outlier_values = column_data.loc[outliers_idx]
                fig_box.add_scatter(
                    y=outlier_values,
                    mode='markers',
                    marker=dict(color='red', size=8),
                    name='Outliers'
                )
            
            st.plotly_chart(fig_box, use_container_width=True)
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Total Points", len(column_data))
            with col2:
                st.metric("Outliers Found", len(outliers_idx))
        
        elif widget['type'] == "üó∫Ô∏è Leaflet Map":
            st.markdown(f"### {widget['title']}")
            
            # –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞
            if widget.get('search_enabled', True):
                search_query = st.text_input("üîç Search location", 
                                           placeholder="Enter city, address, or landmark...",
                                           key=f"search_{id(widget)}")
                
                if search_query and st.button("üåç Find Location", key=f"find_{id(widget)}"):
                    coords = geocode_location(search_query)
                    if coords:
                        widget['center_lat'] = coords[0]
                        widget['center_lon'] = coords[1]
                        st.success(f"Found: {search_query}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            m = folium.Map(
                location=[widget['center_lat'], widget['center_lon']],
                zoom_start=widget['zoom'],
                tiles='OpenStreetMap'
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
            folium.Marker(
                [widget['center_lat'], widget['center_lon']],
                popup=f"üìç {widget['title']}",
                tooltip="Click for info",
                icon=folium.Icon(color='red', icon='info-sign')
            ).add_to(m)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
            add_data_points_to_map(m, df)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            map_data = st_folium(m, width=700, height=400, key=f"map_{id(widget)}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
            if map_data['last_clicked']:
                lat = map_data['last_clicked']['lat']
                lng = map_data['last_clicked']['lng']
                st.info(f"üìç Clicked: {lat:.4f}, {lng:.4f}")
    
    except Exception as e:
        st.error(f"Error rendering widget: {str(e)}")

def apply_dashboard_theme(theme):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –¥–∞—à–±–æ—Ä–¥—É"""
    
    if theme == "Dark":
        st.markdown("""
        <style>
            .stApp { background-color: #0e1117; }
            .metric-card { background: #262730; }
        </style>
        """, unsafe_allow_html=True)
    
    elif theme == "Corporate":
        st.markdown("""
        <style>
            .stApp { background-color: #f8f9fa; }
            .metric-card { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 1rem;
                border-radius: 10px;
                margin: 0.5rem 0;
            }
        </style>
        """, unsafe_allow_html=True)
    
    elif theme == "Modern":
        st.markdown("""
        <style>
            .stApp { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
            .stWidget { background-color: rgba(255,255,255,0.9); border-radius: 10px; }
        </style>
        """, unsafe_allow_html=True)

def create_example_dashboard(df, numeric_cols):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    example_widgets = []
    
    if len(numeric_cols) > 0:
        # Metric card
        example_widgets.append({
            'type': 'üî¢ Metric Card',
            'title': 'Total Records',
            'column': numeric_cols[0],
            'aggregation': 'Count',
            'format': 'Number'
        })
        
        # Line chart
        example_widgets.append({
            'type': 'üìà Line Chart',
            'title': 'Trend Analysis',
            'y_column': numeric_cols[0],
            'color': '#1f77b4',
            'show_points': True
        })
        
        # Leaflet Map
        example_widgets.append({
            'type': 'üó∫Ô∏è Leaflet Map',
            'title': 'Location Map',
            'center_lat': 31.7683,
            'center_lon': 35.2137,
            'zoom': 10,
            'search_enabled': True
        })
        
        # Outlier detection
        example_widgets.append({
            'type': 'üö® Outlier Detection',
            'title': 'Anomaly Detection',
            'column': numeric_cols[0],
            'method': 'IQR (Interquartile Range)',
            'sensitivity': 1.5,
            'show_stats': True
        })
        
        # 3D Scatter –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
        if len(numeric_cols) >= 3:
            example_widgets.append({
                'type': 'üìä 3D Scatter Plot',
                'title': '3D Analysis',
                'x_column': numeric_cols[0],
                'y_column': numeric_cols[1], 
                'z_column': numeric_cols[2],
                'color_by': 'None',
                'point_size': 8
            })
        
        # Data table
        example_widgets.append({
            'type': 'üìã Data Table',
            'title': 'Data Preview',
            'columns': df.columns.tolist()[:4],
            'max_rows': 5
        })
    
    return example_widgets

def detect_outliers(data, method="IQR (Interquartile Range)", sensitivity=1.5):
    """–î–µ—Ç–µ–∫—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    outliers_idx = []
    info = {}
    
    if method == "IQR (Interquartile Range)":
        Q1 = data.quantile(0.25)
        Q3 = data.quantile(0.75)
        IQR = Q3 - Q1
        
        lower_bound = Q1 - sensitivity * IQR
        upper_bound = Q3 + sensitivity * IQR
        
        outliers_idx = data[(data < lower_bound) | (data > upper_bound)].index.tolist()
        
        info = {
            'method': 'IQR',
            'lower_bound': lower_bound,
            'upper_bound': upper_bound,
            'Q1': Q1,
            'Q3': Q3,
            'IQR': IQR
        }
    
    elif method == "Z-Score":
        z_scores = np.abs((data - data.mean()) / data.std())
        outliers_idx = data[z_scores > sensitivity].index.tolist()
        
        info = {
            'method': 'Z-Score',
            'threshold': sensitivity,
            'mean': data.mean(),
            'std': data.std()
        }
    
    return outliers_idx, info

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_demo_data():
    np.random.seed(42)
    data = {
        'Date': pd.date_range('2024-01-01', periods=100),
        'Sales': np.random.normal(1000, 200, 100),
        'Customers': np.random.poisson(30, 100),
        'Revenue': np.random.normal(5000, 1000, 100),
        'Region': np.random.choice(['North', 'South', 'East', 'West'], 100)
    }
    return pd.DataFrame(data)

def create_ecommerce_data():
    np.random.seed(123)
    data = {
        'user_id': range(1, 1001),
        'age': np.random.randint(18, 65, 1000),
        'gender': np.random.choice(['M', 'F'], 1000),
        'purchase_amount': np.random.exponential(50, 1000),
        'category': np.random.choice(['Electronics', 'Clothing', 'Books', 'Home'], 1000),
        'satisfaction': np.random.randint(1, 6, 1000)
    }
    return pd.DataFrame(data)

def auto_analyze_data():
    if 'data' not in st.session_state:
        return
    
    df = st.session_state.data
    
    st.markdown("### üîç Auto Analysis Results")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("#### üìä Dataset Overview")
    st.write(f"Rows: {len(df)}, Columns: {len(df.columns)}")
    
    # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    missing = df.isnull().sum()
    if missing.sum() > 0:
        st.warning(f"Found {missing.sum()} missing values")
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    if len(numeric_cols) > 1:
        corr = df[numeric_cols].corr()
        high_corr = np.where(np.abs(corr) > 0.7)
        if len(high_corr[0]) > len(numeric_cols):  # –∏—Å–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å
            st.info("Found high correlations between variables")

def calculate_data_quality(df):
    score = 10.0
    
    # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    missing_pct = df.isnull().sum().sum() / (len(df) * len(df.columns))
    score -= missing_pct * 5
    
    # –î—É–±–ª–∏–∫–∞—Ç—ã
    duplicate_pct = df.duplicated().sum() / len(df)
    score -= duplicate_pct * 3
    
    return max(0, score)

def fill_missing_values(df):
    df_filled = df.copy()
    
    for col in df_filled.columns:
        if df_filled[col].dtype in ['float64', 'int64']:
            df_filled[col] = df_filled[col].fillna(df_filled[col].median())
        else:
            df_filled[col] = df_filled[col].fillna(df_filled[col].mode()[0] if not df_filled[col].mode().empty else 'Unknown')
    
    return df_filled

def show_world_map():
    st.markdown("### üåç Interactive World Map")
    world_data = create_world_map_data()
    map_type = st.selectbox("Map Type", ["üåç Countries", "üèôÔ∏è Cities"])
    
    if map_type == "üåç Countries":
        fig_map = px.choropleth(
            world_data['countries'], 
            locations="iso_alpha",
            color="value",
            hover_name="country",
            color_continuous_scale="Viridis",
            title="World Data by Countries"
        )
        st.plotly_chart(fig_map, use_container_width=True)
        
    elif map_type == "üèôÔ∏è Cities":
        fig_map = px.scatter_geo(
            world_data['cities'],
            lat="lat",
            lon="lon",
            color="population",
            size="population",
            hover_name="city",
            title="Major Cities Population",
            color_continuous_scale="Plasma"
        )
        st.plotly_chart(fig_map, use_container_width=True)

def create_world_map_data():
    countries_data = {
        'country': ['USA', 'China', 'Germany', 'Japan', 'UK', 'France', 'India', 'Brazil', 'Canada', 'Australia', 'Israel', 'Ukraine'],
        'iso_alpha': ['USA', 'CHN', 'DEU', 'JPN', 'GBR', 'FRA', 'IND', 'BRA', 'CAN', 'AUS', 'ISR', 'UKR'],
        'value': [331, 1439, 83, 126, 67, 67, 1380, 213, 38, 25, 9.4, 41.1]
    }
    
    cities_data = {
        'city': ['New York', 'London', 'Tokyo', 'Paris', 'Sydney', 'Moscow', 'Dubai', 'Singapore', 'Berlin', 'Toronto', 'Tel Aviv', 'Jerusalem', 'Kyiv', 'Odesa'],
        'lat': [40.7128, 51.5074, 35.6762, 48.8566, -33.8688, 55.7558, 25.2048, 1.3521, 52.5200, 43.6532, 32.0853, 31.7683, 50.4501, 46.4825],
        'lon': [-74.0060, -0.1278, 139.6503, 2.3522, 151.2093, 37.6173, 55.2708, 103.8198, 13.4050, -79.3832, 34.7818, 35.2137, 30.5234, 30.7233],
        'population': [8.4, 9.0, 13.9, 2.1, 5.3, 12.5, 3.4, 5.9, 3.7, 2.9, 0.46, 0.95, 2.95, 1.02]
    }
    
    return {
        'countries': pd.DataFrame(countries_data),
        'cities': pd.DataFrame(cities_data)
    }

def generate_ab_test_data():
    np.random.seed(42)
    
    # Control group
    control = pd.DataFrame({
        'group': 'Control',
        'conversion_rate': np.random.beta(2, 18, 1000),  # ~10% conversion
        'revenue': np.random.exponential(25, 1000),
        'clicks': np.random.poisson(100, 1000)
    })
    
    # Treatment group (slightly better)
    treatment = pd.DataFrame({
        'group': 'Treatment',
        'conversion_rate': np.random.beta(2.5, 17.5, 1000),  # ~12.5% conversion
        'revenue': np.random.exponential(30, 1000),
        'clicks': np.random.poisson(110, 1000)
    })
    
    return pd.concat([control, treatment], ignore_index=True)

def analyze_ab_test(data, metric):
    control = data[data['group'] == 'Control'][metric]
    treatment = data[data['group'] == 'Treatment'][metric]
    
    # T-test
    t_stat, p_value = stats.ttest_ind(control, treatment)
    
    return {
        'control_mean': control.mean(),
        'treatment_mean': treatment.mean(),
        'p_value': p_value,
        't_statistic': t_stat
    }

def create_sample_database():
    conn = sqlite3.connect('sample_data.db')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥–∞–∂
    sales_data = {
        'id': range(1, 101),
        'region': np.random.choice(['North', 'South', 'East', 'West'], 100),
        'amount': np.random.exponential(100, 100),
        'date': pd.date_range('2024-01-01', periods=100),
        'customer_id': np.random.randint(1, 51, 100)
    }
    
    df = pd.DataFrame(sales_data)
    df.to_sql('sales', conn, if_exists='replace', index=False)
    conn.close()

def execute_sql_query(query):
    try:
        conn = sqlite3.connect('sample_data.db')
        result = pd.read_sql_query(query, conn)
        conn.close()
        return result
    except Exception as e:
        raise e

def generate_executive_summary(df):
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    
    summary = f"""
# üìä Executive Summary

## Key Metrics
- **Total Records**: {len(df):,}
- **Data Columns**: {len(df.columns)}
- **Data Quality**: {calculate_data_quality(df):.1f}/10

## Insights
"""
    
    if len(numeric_cols) > 0:
        for col in numeric_cols[:3]:
            mean_val = df[col].mean()
            summary += f"- **{col}**: Average of {mean_val:.2f}\n"
    
    return summary

def generate_detailed_analysis(df):
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    text_cols = df.select_dtypes(include=['object']).columns
    
    analysis = f"""
# üìà Detailed Data Analysis

## Dataset Overview
- **Total Rows**: {len(df):,}
- **Total Columns**: {len(df.columns)}
- **Memory Usage**: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB
- **Numeric Columns**: {len(numeric_cols)}
- **Text Columns**: {len(text_cols)}

## Data Quality Assessment
- **Missing Values**: {df.isnull().sum().sum():,} ({(df.isnull().sum().sum() / (len(df) * len(df.columns)) * 100):.1f}%)
- **Duplicate Rows**: {df.duplicated().sum():,} ({(df.duplicated().sum() / len(df) * 100):.1f}%)
- **Quality Score**: {calculate_data_quality(df):.1f}/10

## Statistical Summary
"""
    
    if len(numeric_cols) > 0:
        analysis += "\n### Numeric Columns Analysis\n"
        for col in numeric_cols:
            stats = df[col].describe()
            analysis += f"""
**{col}**:
- Mean: {stats['mean']:.2f}
- Median: {stats['50%']:.2f}
- Std Dev: {stats['std']:.2f}
- Min: {stats['min']:.2f}
- Max: {stats['max']:.2f}
"""
    
    return analysis

def generate_custom_report(df):
    return f"""
# üéØ Custom Analytics Report

## Executive Summary
This report provides a comprehensive analysis of the uploaded dataset containing {len(df):,} records across {len(df.columns)} variables.

## Key Findings
1. **Data Completeness**: {100 - (df.isnull().sum().sum() / (len(df) * len(df.columns)) * 100):.1f}% complete
2. **Data Uniqueness**: {100 - (df.duplicated().sum() / len(df) * 100):.1f}% unique records
3. **Numerical Features**: {len(df.select_dtypes(include=[np.number]).columns)} available for analysis

## Recommendations
- Consider data cleaning for missing values
- Explore correlations between numeric variables
- Implement feature engineering for categorical variables
"""

def show_stats():
    st.markdown("## üìä Advanced Statistical Analysis")
    if 'data' not in st.session_state:
        st.warning("Please upload data first!")
        return
    
    df = st.session_state.data
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìà Descriptive Statistics")
        if len(numeric_cols) > 0:
            st.dataframe(df[numeric_cols].describe())
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if len(numeric_cols) > 0:
            st.markdown("### üìä Distribution Analysis")
            selected_col = st.selectbox("Choose column for distribution", numeric_cols)
            
            col_a, col_b = st.columns(2)
            
            with col_a:
                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                fig_hist = px.histogram(df, x=selected_col, title=f"Distribution of {selected_col}")
                st.plotly_chart(fig_hist, use_container_width=True)
            
            with col_b:
                # Box plot
                fig_box = px.box(df, y=selected_col, title=f"Box Plot: {selected_col}")
                st.plotly_chart(fig_box, use_container_width=True)
    
    with col2:
        st.markdown("### üéØ Statistical Tests")
        
        if len(numeric_cols) >= 2:
            st.markdown("#### Correlation Tests")
            col1_test = st.selectbox("Variable 1", numeric_cols, key="test1")
            col2_test = st.selectbox("Variable 2", [col for col in numeric_cols if col != col1_test], key="test2")
            
            if st.button("Run Correlation Test"):
                corr_coef, p_value = stats.pearsonr(df[col1_test].dropna(), df[col2_test].dropna())
                
                st.metric("Correlation Coefficient", f"{corr_coef:.3f}")
                st.metric("P-value", f"{p_value:.4f}")
                
                if p_value < 0.05:
                    st.success("Statistically significant correlation!")
                else:
                    st.warning("No significant correlation")
        
        # Normality tests
        if len(numeric_cols) > 0:
            st.markdown("#### Normality Test")
            norm_col = st.selectbox("Test for normality", numeric_cols, key="norm")
            
            if st.button("Run Shapiro-Wilk Test"):
                stat, p_val = stats.shapiro(df[norm_col].dropna().sample(min(5000, len(df))))
                
                st.metric("Test Statistic", f"{stat:.4f}")
                st.metric("P-value", f"{p_val:.4f}")
                
                if p_val > 0.05:
                    st.success("Data appears normally distributed")
                else:
                    st.warning("Data is not normally distributed")

if __name__ == "__main__":
    main()
